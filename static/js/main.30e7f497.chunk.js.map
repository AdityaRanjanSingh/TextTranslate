{"version":3,"sources":["components/UserInputBox.js","actions/inputAction.js","actions/types.js","components/OutputTextBox.js","js/constants.js","components/Actions.js","actions/translateActions.js","actions/selectAction.js","reducers/translateReducer.js","reducers/inputReducer.js","reducers/selectReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["UserInputBox","onUserInput","e","_this","props","inputText","target","value","react_default","a","createElement","className","placeholder","onChange","this","Component","connect","state","input","dispatch","console","log","type","payload","OutputTextBox","outputText","translate","Languges","Actions","translateText","lang","selectionChange","options","map","lan","key","onClick","points","language","fetch","concat","then","response","json","data","contents","translated","initialState","combineReducers","arguments","length","undefined","action","Object","objectSpread","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","App","es","components_UserInputBox","components_Actions","components_OutputTextBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30e7f497.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../css/UserInput.css';\nimport { inputText } from '../actions/inputAction'\nclass UserInputBox extends Component {\n    onUserInput = (e) => {\n        this.props.inputText(e.target.value)\n    }\n    render() {\n        return (\n            <div className=\"w-100\">\n                <textarea className=\"w-100 user-input-text-area\" placeholder=\"Type text here to translate...\" onChange={this.onUserInput}></textarea>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    inputText: state.input.inputText\n})\nexport default connect(mapStateToProps, { inputText })(UserInputBox);","import { INPUT_ACTION } from './types';\n\nexport const inputText = (inputText) => dispatch => {\n\n    // fetch(`https://api.funtranslations.com/translate/${lang}.json?text=${inputText}`)\n    //     .then(response => response.json())\n    //     .then(data => {\n    console.log(inputText)\n    dispatch({\n        type: INPUT_ACTION,\n        payload: inputText\n    })\n    // });\n\n} ","export const TRANSLATE_TEXT = \"TRANSLATE_TEXT\";\nexport const INPUT_ACTION = \"INPUT_ACTION\";\nexport const SELECT_ACTION = \"SELECT_ACTION\";","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../css/OutputText.css'\n\nclass OutputTextBox extends Component {\n    render() {\n        return (\n            <div className=\"w-100\">\n                <p className=\"w-100 output-text-area\">{this.props.outputText}</p>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    outputText: state.translate.outputText\n})\nexport default connect(mapStateToProps, {})(OutputTextBox)\n","export let Languges = ['yoda', 'pirate', 'valspeak', 'minion', 'ferblatin', 'piglatin', 'dothraki', 'valyrian', 'sindarin', 'quenya', 'orcish', 'sith', 'cheunh', 'gungan', 'mandalorian', 'huttese', 'chef', 'catalan', 'oldenglish', 'shakespeare', 'vulcan', 'klingon', 'romulan', 'dovahzul', 'thuum', 'aldmeris', 'groot', 'jive', 'dolan', 'fudd', 'cockney', 'morse', 'us2uk', 'uk2us', 'leetspeak', 'brooklyn', 'ermahgerd', 'australian', 'boston', 'austrian', 'article_rewrite', 'braille', 'numbers', 'emoji', 'navi', 'starwars', 'got', 'startrek', 'elvish']","import React, { Component } from 'react';\nimport { Languges } from '../js/constants';\nimport '../css/Actions.css';\nimport { translateText } from '../actions/translateActions';\nimport { selectionChange } from '../actions/selectAction';\nimport { connect } from 'react-redux';\n\n\nclass Actions extends Component {\n    componentDidMount() {\n        this.props.selectionChange('yoda')\n    }\n    translateText = () => {\n        // console.log(this.props.inputText, this.props.lang);\n        this.props.translateText(this.props.inputText, this.props.lang)\n    }\n    selectionChange = (e) => {\n        this.props.selectionChange(e.target.value)\n    }\n\n    render() {\n        let options = Languges.map((lan) => {\n            return <option key={lan} value={lan}>{lan}</option>\n        })\n        return (\n            <div className=\"d-flex align-items-center justify-content-center mb-3 mt-3 flex-lg-column flex-sm-column row\">\n                <div className=\"col-sm-12\">\n                    <select className=\"select-css\" onChange={this.selectionChange}>\n                        {options}\n                    </select>\n                </div>\n                <div className=\"mt-2 mb-2 d-flex justify-content-center col-sm-12\">\n                    {/* <button onClick={this.translateText} className=\"translate-button\">Translate</button> */}\n                    <div className=\"button\" onClick={this.translateText}>\n                        <span>Translate</span>\n                        <svg>\n                            <polyline className=\"o1\" points=\"0 0, 150 0, 150 55, 0 55, 0 0\"></polyline>\n                            <polyline className=\"o2\" points=\"0 0, 150 0, 150 55, 0 55, 0 0\"></polyline>\n                        </svg>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n};\nconst mapStateToProps = state => ({\n    inputText: state.input.inputText,\n    lang: state.language.language\n})\nexport default connect(mapStateToProps, { translateText, selectionChange })(Actions)","import { TRANSLATE_TEXT } from './types';\n\nexport const translateText = (inputText, lang) => dispatch => {\n\n    fetch(`https://api.funtranslations.com/translate/${lang}.json?text=${inputText}`)\n        .then(response => response.json())\n        .then(data => {\n            dispatch({\n                type: TRANSLATE_TEXT,\n                payload: data.contents.translated\n            })\n        });\n\n} ","import { SELECT_ACTION } from './types';\n\nexport const selectionChange = (lang) => dispatch => {\n\n    // fetch(`https://api.funtranslations.com/translate/${lang}.json?text=${inputText}`)\n    //     .then(response => response.json())\n    //     .then(data => {\n    dispatch({\n        type: SELECT_ACTION,\n        payload: lang\n    })\n    // });\n\n} ","import { TRANSLATE_TEXT } from '../actions/types';\n\nconst initialState = {\n    inputText: \"\",\n    outputText: \"\",\n    language: \"\"\n}\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case TRANSLATE_TEXT:\n            console.log(\"reducers\", action.payload)\n            return {\n                ...initialState,\n                outputText: action.payload\n            }\n        default:\n            return state;\n    }\n}","import { INPUT_ACTION } from '../actions/types';\n\nconst initialState = {\n    inputText: \"\",\n    outputText: \"\",\n    language: \"\"\n}\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case INPUT_ACTION:\n            return {\n                ...initialState,\n                inputText: action.payload\n            }\n        default:\n            return state;\n    }\n}","import { SELECT_ACTION } from '../actions/types';\n\nconst initialState = {\n    inputText: \"\",\n    outputText: \"\",\n    language: \"yoda\"\n}\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case SELECT_ACTION:\n            return {\n                ...initialState,\n                language: action.payload\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport translateReducer from './translateReducer';\nimport inputReducer from './inputReducer';\nimport selectReducer from './selectReducer'\n\nexport default combineReducers({\n    translate: translateReducer,\n    input: inputReducer,\n    language: selectReducer\n});","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {\n\n}\n\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middleware));\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport UserInputBox from './components/UserInputBox';\nimport OutputTextBox from './components/OutputTextBox';\nimport Actions from './components/Actions'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"container  h-100\">\n        <div className=\"row d-flex justify-content-center pt-3\">\n          <h1 className=\"page-header\">Fun translations</h1>\n        </div>\n        <div className=\"row pt-4\">\n          <div className=\"col-md-5\">\n            <UserInputBox ></UserInputBox>\n          </div>\n          <div className=\"col-md-2 d-flex align-items-center justify-content-center\">\n            <Actions></Actions>\n\n          </div>\n\n          <div className=\"col-md-5\">\n            <OutputTextBox ></OutputTextBox>\n          </div>\n        </div>\n      </div>\n\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}